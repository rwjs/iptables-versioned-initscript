#!/bin/bash

##############################################################################
#
# NAME:
#	iptables-versioned-initscript
#
# SYNOPSIS:
#	/etc/init.d/iptables [start|stop|restart|status|save|revert {n}|rollback {n}]
#
# DESCRIPTION:
#	As Debian seems to have depreciated the init script for iptables,
#	this is a basic drop-in replacement. The only notable feature is that
#	it does handle basic firewall rule versioning.
#
# AUTHOR:
#	Robert W.J. Stewart
#
# TODO:
#	- Add a timed restart (requiring a user prompt to commit the rules)
#
##############################################################################
################################ Set defaults ################################

# Directory to store the rules
RULES_DIR="/var/lib/iptables"
# The 'active' rules file
RULES_FILE="iptables.rules"
# The maximum number of versions to store
VERSION_LIMIT=30

####################### Clean variables and environment ######################

[[ $UID -eq 0 ]] || (echo "Must be run as root!" >&2 ; exit 1)
mkdir -p $RULES_DIR
[[ $RULES_DIR =~ /$ ]] && RULES_DIR="$(echo $RULES_DIR | sed 's/\/$//')"
[[ $RULES_FILE =~ ^/ ]] && RULES_FILE="$(echo $RULES_FILE | sed 's/^\///')"
VERSION_LIMIT=$(echo "$VERSION_LIMIT" | sed 's/^0*//' | tr -cd '0-9' ; echo)
[[ VERSION_LIMIT" =~ [0-9]*[1-9]+ ]] || VERSION_LIMIT=0

############################## Define functions ##############################

function clearall
{
	iptables -F
	iptables -X
}

function rotator
{
	# Recursive solution for reordering the versions
	#
	# $1 - The version to start at (default=1)
	# $2 - The next version offset (default=1).
	# $3 - The previous version (default=1)

	[[ "$1" =~ ^-?[0-9]+$ && "$1" -ne 0 ]] && local curr="$1" || local curr=1
	[[ "$2" =~ ^-?[0-9]+$ && "$2" -ne 0 ]] && local next="$2" || local next=1
	[[ "$3" =~ ^-?[0-9]+$ && "$3" -ne 0 ]] && local prev="$3" || local prev=1

	if [[ -e "$RULES_DIR/$RULES_FILE.$curr" ]]
	then
		[[ $next -gt 0 ]] && rotator "$[ $curr + $prev ]" "$next" "$prev"
		if [[ "$VERSION_LIMIT" -ne 0 && "$curr" -gt "$VERSION_LIMIT" ]]
		then
			rm "$RULES_DIR/$RULES_FILE.$curr"
		else
			mv "$RULES_DIR/$RULES_FILE.$curr" "$RULES_DIR/$RULES_FILE.$[ $curr + $next]"
		fi
		[[ $next -lt 0 ]] && rotator "$[ $curr + $[ $prev * -1 ] ]" "$next" "$prev"
	fi
}

function start
{
	if [[ -e "$RULES_DIR/$RULES_FILE" ]]
	then
		clearall
		iptables-restore < "$RULES_DIR/$RULES_FILE"
	fi
}

function save
{
	if [[ -e "$RULES_DIR/$RULES_FILE" ]]
	then
		rotator 1 1
		mv "$RULES_DIR/$RULES_FILE" "$RULES_DIR/$RULES_FILE.1"
	fi
	iptables-save > "$RULES_DIR/$RULES_FILE"
}

function revert
{
	[[ $1 =~ ^[0-9]+$ && $1 -gt 0 ]] && vers=$1 || vers=1
	iptables-restore < "$RULES_DIR/$RULES_FILE.$vers"
}

function rollback
{
	[[ $1 =~ ^[0-9]+$ && $1 -gt 0 ]] && vers=$1 || vers=1
	mv "$RULES_DIR/$RULES_FILE.$vers" "$RULES_DIR/$RULES_FILE"
	[[ "$vers" -eq 1 ]] && rm -f $RULES_DIR/$RULES_FILE.1 || rm -f $RULES_DIR/$RULES_FILE.[1-$vers]
	rotator "$[ $vers + 1]" -$vers -1
	echo iptables-restore < "$RULES_DIR/$RULES_FILE"
}

################################# Get options ################################

case "$1" in
	start)
		start
		;;
	stop)
		save
		clearall
		;;
	restart)
		save
		start
		;;
	status)
		iptables-save
		;;
	revert)
		revert "$2"
		;;
	rollback)
		rollback "$2"
		;;
	save)
		save
		;;
	*)
		echo "Usage: $0 {start|stop|status|restart|save|revert {n}|rollback {n}}"
		exit 1
		;;
esac

exit 0
